services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    healthcheck:
      test: ["CMD", "cub", "zk-ready", "zookeeper:2181", "30"]
      interval: 30s
      timeout: 0s
      retries: 3
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - api
  broker:
    image: confluentinc/cp-server:latest
    hostname: broker
    container_name: broker
    healthcheck:
      test: ["CMD", "cub", "kafka-ready", "1", "90", "-b", "localhost:9092"]
      interval: 30s
      timeout: 0s
      retries: 3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    networks:
      - api
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    healthcheck:
      test: ["CMD", "cub", "sr-ready", "localhost", "8081", "30"]
      interval: 30s
      timeout: 0s
      retries: 3
    depends_on:
      zookeeper:
        condition: service_healthy
      broker:
        condition: service_healthy
    ports:
      - "8085:8085"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
    networks:
      - api

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: kafka-control-center
    container_name: control-center
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021"]
      interval: 30s
      timeout: 0s
      retries: 3
    depends_on:
      zookeeper:
        condition: service_healthy
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # Define the network that should be used
      - "traefik.docker.network=api"
      # URL to reach this container
      - "traefik.http.routers.control-center.rule=Host(`kafka.docker.localhost`)"
      # Activation of TLS
      - "traefik.http.routers.control-center.tls=true"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_REST_LISTENERS: http://0.0.0.0:9021
      PORT: 9021
    networks:
      - api
